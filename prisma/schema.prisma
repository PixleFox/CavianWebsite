datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// ========== ENUMS ==========
enum AdminRole {
  OWNER
  MANAGER
  SELLER
  MARKETER
  OPERATOR
}

enum ProductType {
  T_SHIRT
  HOODIE
  SWEATSHIRT
  POLO
  TANK_TOP
  LONGSLEEVE
  MUG
  SOCKS
  HAT
  TOTE_BAG
  ACCESSORY
}

enum Gender {
  MEN
  WOMEN
  UNISEX
  KIDS
}

enum SizeType {
  CLOTHING
  SHOES
  ACCESSORIES
  KIDS
}

enum ClothingSize {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
  XXXXL
  XS_S
  S_M
  L_XL
  XL_XXL
  ONE_SIZE
}

// ========== MODELS ==========
model Admin {
  id                Int            @id @default(autoincrement())
  email             String?        @unique @db.VarChar(255)
  phoneNumber       String         @unique @db.VarChar(15)
  firstName         String         @db.Text
  lastName          String         @db.Text
  passwordHash      String         @db.VarChar(255)
  role              AdminRole      @default(OPERATOR)
  isActive          Boolean        @default(true)
  creatorId         Int?
  creator           Admin?         @relation("CreatedAdmins", fields: [creatorId], references: [id], onDelete: SetNull)
  createdAdmins     Admin[]        @relation("CreatedAdmins")
  createdAt         DateTime       @default(now()) @db.Timestamptz
  updatedAt         DateTime       @updatedAt @db.Timestamptz
  lastLoginAt       DateTime?      @db.Timestamptz
  lastLogoutAt      DateTime?      @db.Timestamptz
  failedLoginAttempts Int          @default(0)
  lockedUntil       DateTime?      @db.Timestamptz
  deletedAt         DateTime?      @db.Timestamptz
  sessions          AdminSession[]

  createdProducts   Product[]      @relation("CreatedProducts")
  updatedProducts   Product[]      @relation("UpdatedProducts")

  @@index([email])
  @@index([phoneNumber])
  @@index([creatorId])
  @@index([createdAt])
  @@index([lastLoginAt])
}

model AdminSession {
  id                Int            @id @default(autoincrement())
  adminId           Int
  admin             Admin          @relation(fields: [adminId], references: [id], onDelete: Cascade)
  tokenHash         String         @db.VarChar(255)
  ipAddress         String         @db.VarChar(45)
  userAgent         String?        @db.VarChar(255)
  createdAt         DateTime       @default(now()) @db.Timestamptz
  expiresAt         DateTime       @db.Timestamptz
  isValid           Boolean        @default(true)

  @@index([adminId])
  @@index([tokenHash])
  @@index([expiresAt])
}

// ========== PRODUCT MODELS ==========
model Product {
  // Core Identifiers
  id          String    @id
  name        String
  slug        String    @unique
  description String?
  
  // Categorization
  type        ProductType
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  tags        String[]
  gender      Gender?
  
  // Pricing (derived from variants)
  price       Decimal   @default(0)  // Lowest price from active variants
  compareAtPrice Decimal?            // Highest compareAtPrice from variants
  costPrice   Decimal?               // Weighted average cost from variants
  
  // Inventory
  variants    Variant[]
  totalStock  Int       @default(0) // Sum of all variants' stock
  isActive    Boolean   @default(false)
  manageStock Boolean   @default(true)
  
  // Media
  mainImage   String?   // First image from variants
  images      String[]  // All unique images from variants
  videoUrl    String?   // First video URL from variants
  
  // Physical Properties
  weight      Int?      // in grams
  dimensions  String?   // "LxWxH" in cm
  material    String?
  
  // Type-Specific Attributes
  clothingAttributes ClothingAttributes?
  mugAttributes     MugAttributes?
  accessoryAttributes AccessoryAttributes?
  
  // Sizing
  availableSizes String[]  // Unique sizes from active variants
  sizeGuide     SizeGuide? @relation("ProductSizeGuide", fields: [sizeGuideId], references: [id])
  sizeGuideId   String?
  
  // Status & SEO
  isFeatured  Boolean   @default(false)
  isNew       Boolean   @default(true)
  metaTitle   String?
  metaDescription String?
  
  // Timestamps & Audit
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz
  publishedAt DateTime? @db.Timestamptz
  createdById Int?
  createdBy   Admin?    @relation("CreatedProducts", fields: [createdById], references: [id])
  updatedById Int?
  updatedBy   Admin?    @relation("UpdatedProducts", fields: [updatedById], references: [id])
  
  @@index([slug])
  @@index([isActive])
  @@index([isFeatured])
  @@index([createdAt])
}

model Variant {
  id          String    @id @default(uuid())
  sku         String
  barcode     String?
  
  // Attributes
  size        String?   // S, M, L or custom size
  color       String?
  colorHex    String?   // #000000
  
  // Inventory
  price       Decimal?  // Override product price
  stock       Int       @default(0)
  isActive    Boolean   @default(true)
  
  // Media
  image       String?   // Variant-specific image
  
  // Relations
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  
  // Timestamps
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz
  
  @@unique([productId, size, color])
  @@index([sku])
  @@index([barcode])
  @@index([isActive])
}

// Type-Specific Attributes
model ClothingAttributes {
  id          String    @id @default(uuid())
  product     Product   @relation(fields: [productId], references: [id])
  productId   String    @unique
  
  fit         String?   // Slim, Regular, Oversized
  sleeveType  String?   // Short, Long, Sleeveless
  neckType    String?   // Crew, V-neck, Polo
  pattern     String?   // Solid, Striped, Graphic
  care        String?   // Washing instructions
  fabricType  String?   // Cotton, Polyester, etc.
  origin      String?   // Country of origin
}

model MugAttributes {
  id          String    @id @default(uuid())
  product     Product   @relation(fields: [productId], references: [id])
  productId   String    @unique
  
  capacity    String?   // 11oz, 15oz
  material    String?   // Ceramic, Glass
  microwaveSafe Boolean? 
  dishwasherSafe Boolean?
  height      Float?    // in cm
  diameter    Float?    // in cm
}

model AccessoryAttributes {
  id          String    @id @default(uuid())
  product     Product   @relation(fields: [productId], references: [id])
  productId   String    @unique
  
  accessoryType String?  // Keychain, Pin, Sticker
  size        String?   // Small, Medium, Large
  material    String?
  care        String?
}

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  bannerImage String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  sizeGuides  SizeGuide[] @relation("CategorySizeGuide")
  isActive    Boolean   @default(true)
  order       Int       @default(0)
  featured    Boolean   @default(false)
  
  // Timestamps
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz
  
  @@index([slug])
  @@index([isActive])
  @@index([order])
}

model SizeGuide {
  id          String    @id @default(uuid())
  name        String
  type        SizeType  @default(CLOTHING)
  description String?
  content     Json      // Size chart data
  isDefault   Boolean   @default(false)
  categories  Category[] @relation("CategorySizeGuide")
  products    Product[] @relation("ProductSizeGuide")
  
  // Timestamps
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz
}